#!/usr/bin/env ruby

=begin
MIT License

Copyright (c) 2021 Yush08

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
=end

# Handling configuration.
begin
  config = File.open('KeetConf').read
rescue StandardError => _e
  puts 'No KeetConf file found!'
  exit 1
end

eval(config)

if defined? GREET && defined? COMMANDS
  puts "\e[102;30m OK! \e[0m Loaded configuration!"
else
  puts "Invalid configuration!"
end

# Cleanly exiting on a SIGINT (Ctrl + C)
trap "SIGINT" do
  puts "\n\n\e[41;30m SIGINT \e[0m - Goodbye! ðŸ‘‹"

  # Optional function that may exist in the configuration.
  if defined? ON_SIGINT
    ON_SIGINT()
  end

  exit 130
end

CMDS = COMMANDS.transform_keys(&:downcase)

def execute_profile(profile)
  platform = `uname -s`.strip
  profiles = CMDS.keys

  if profiles.include? profile
    CMDS[profile].keys.each do |os|
      next if os == 'description'

      if /#{os}/.match(platform)
        CMDS[profile][os].each do |cmd|
          if cmd.class == Hash
            puts "=> #{cmd.command}\n"
            begin
              system(cmd, exception: true)
            rescue StandardError => e
              puts "Command failed; Ignoring..."
            end
          else
            puts "=> #{cmd}\n"
            begin
              system(cmd, exception: true)
            rescue StandardError => e
              e.message['Command failed'] = "\e[41;30m COMMAND FAILED \e[0m"
              puts "\n#{e.message}"
              exit 1
            end
          end
        end
      end
    end
  else
    puts 'Invalid profile...'
  end
end

if ARGV.length == 0
  PROFILES = CMDS.keys

  puts GREET
  puts "What profile would you like to use?\n\n"

  longest = PROFILES.max_by(&:length).length + 2
  PROFILES.each_with_index do |profile, index|
    # Calculate the amount of spaces to pad.
    puts "#{index} -> #{profile}#{" " * (longest - profile.length)}=> #{CMDS[profile]["description"]}"
  end

  print "\nProfile -> "
  
  begin
    profile = gets.strip
  rescue
    puts "\n\e[41;30m ERR! \e[0m - Failed to get user input."
    exit
  end
  
  if /\d/ =~ profile
    profile = PROFILES[profile.to_i].downcase
    puts "Executing #{profile} profile..."
    execute_profile profile
  else
    profile = profile.downcase
    puts "Executing #{profile} profile..."
    execute_profile profile
  end
else
  execute_profile ARGV[0]
end
